#+title: My Emacs Config
#+author: Bohan Li
#+email: jim.jd.davis@gmail.com
#+property: header-args :results silent

#+options: toc:nil

* Table of Contents                                                     :TOC:
- [[#about][About]]
- [[#early-initel][early-init.el]]
  - [[#header][Header]]
  - [[#speed-tweaks][Speed tweaks]]
  - [[#package-utilities][Package utilities]]
  - [[#early-tweaks-on-appearance][Early tweaks on appearance]]
  - [[#provide-early-initel][Provide =early-init.el=]]
- [[#nitel][nit.el]]
  - [[#header-1][Header]]
  - [[#general-settings][General Settings]]
  - [[#appearance][Appearance]]
  - [[#ivy-setup][Ivy Setup]]
  - [[#projects][Projects]]
  - [[#version-control][Version Control]]
  - [[#editing][Editing]]
  - [[#org-mode][Org-mode]]
  - [[#terminalshell][Terminal/Shell]]
  - [[#tty-emacs-specific][TTY Emacs Specific]]
  - [[#bufferwindow-management][Buffer/Window Management]]
  - [[#miscellaneous-packages][Miscellaneous Packages]]
  - [[#final-touch][Final Touch]]
  - [[#provide-initel][Provide init.el]]

* About
This org file contains my Emacs configurations. Once tangled it "compiles" into
init.el (and possibly early-init.el, depending on the Emacs version), which can
be used by Emacs at startup. Parts of the file are inspired by Andrey's dot-file
available at [[https://github.com/andreyorst/dotfiles][Github]]. 

* early-init.el
:properties:
:header-args: :tangle "./early-init.el"
:end:

Early-init.el was introduced since Emacs 27. Most configurations
should still belong to init.el, but this makes it possible to change
things at a very early stage, sometimes quite helpful.

** Header
#+begin_src elisp
  ;;; early-init.el --- Early configs -*- lexical-binding: t; buffer-read-only:t -*-
  ;;;
  ;;; Commentary:
  ;;; This file is auto-generated from an org file. Please do not change this file directly.
  ;;;
  ;;; Code:
#+end_src

** Speed tweaks
Tweak garbage collection and also other things for a better
performance. This may need to be changed if on a relatively
resource-constraint machine.

#+begin_src elisp
  (setq gc-cons-threshold 500000000)
  (setq read-process-output-max (* 2048 2048))
#+end_src

** Package utilities
*** Straight.el
Straight.el helps managing packages in a very convenient yet
consistent way. Bootstrap it so we can use it later to require
packages. 

We are using the develop branch of the straight repo. Also by default
use straight with use-package.
#+begin_src elisp
  (defvar straight-repository-branch "develop")
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

*** Use-package.el
Use use-package for much easier package configuration with auto-loading.

#+begin_src elisp
  (straight-use-package 'use-package)
  (setq use-package-verbose nil)
  (setq straight-use-package-by-default t)
#+end_src

*** Others
Do not load package.el since we are not using it.
#+begin_src elisp
  (setq package-enable-at-startup nil)
#+end_src

** Early tweaks on appearance
No menu, tool, scroll bars, please. 
#+begin_src elisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Provide =early-init.el=
#+begin_src elisp
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

* nit.el
:properties:
:header-args: :tangle "./init.el"
:end:

Init.el should be placed in =user-emacs-directory=. By default it's
in =~/.emacs.d/=. 

** Header
#+begin_src elisp
  ;;; init.el --- My emacs configs -*- lexical-binding: t; buffer-read-only:t -*-
  ;;;
  ;;; Commentary:
  ;;; This file is auto-generated from an org file. Please do not change this file directly.
  ;;;
  ;;; Code:
#+end_src

** General Settings
*** Default files
 Load =early-init.el= manually if it is not supported by this version of Emacs.
 #+begin_src elisp
   (unless (featurep 'early-init)
     (let ((early-init-file (expand-file-name "early-init.el" user-emacs-directory)))
       (when (file-exists-p early-init-file) (load early-init-file))))
 #+end_src 

 Define a separate file for customized variables. Create the file if it
 does not exist. However we are not loading the file since I do not use
 the customize interface, but use this file to do configuration. Also,
 if anything is deleted in =init.el=, the saved customized values would
 not interfere.

 #+begin_src elisp
   (defconst custom-file (expand-file-name "autogen-cus.el" user-emacs-directory))
   (unless (file-exists-p custom-file) (write-region "" nil custom-file))
 #+end_src

*** History saving
Save command and buffer history across sessions. 
#+begin_src elisp
  (savehist-mode t)
#+end_src

*** Other
Set recenter positions so we can see a portion of the previous/next page.
#+begin_src elisp
  (setq recenter-positions '(middle 0.15 0.85))
#+end_src

The default scroll amount is too fast for me. 
#+begin_src elisp
  (setq mouse-wheel-scroll-amount
	'(3 ((shift) . 1) ((meta)) ((control) . text-scale))
	mouse-wheel-progressive-speed nil)
#+end_src

Resize by pixels. 
#+begin_src elisp
  (setq frame-resize-pixelwise t)
#+end_src

** Appearance
Set up theme, mode-line, tab-bar, etc. I usually set them up before
other packages, since some packages do not play nice with themes and
may get reset if a theme is loaded after the package is initialized.

*** All the icons
Use icons in Emacs for a better look. 
#+begin_src elisp
  (use-package all-the-icons)
#+end_src

*** Mode-line
Currently using telephone-line. I also liked doom-mode-line but it had
some bugs in updating the mode-line contents when I tested it.
#+begin_src elisp
  (use-package telephone-line
    :custom
    ((telephone-line-height 22))
    :config
    (telephone-line-mode))
#+end_src

*** Themes
I quite like doom themes since they provide a modern look to Emacs. 
#+begin_src elisp
  (use-package doom-themes
    :config
    (load-theme 'doom-one t))
#+end_src

*** Tabs
Use Centaur tabs. It has a modern look, but sometimes does not play
that well with other packages. Need to be careful.

Define a function to check if centaur tabs mode is active, if we want
to call the function =centaur-tabs-local-mode=, since it will fail if
not in centaur tabs mode.

#+begin_src elisp
  (defun jd:disable-centaur-tabs ()
      (when centaur-tabs-mode
	(centaur-tabs-local-mode)))
#+end_src

#+begin_src elisp
  (use-package centaur-tabs
    :demand
    :custom
    ((centaur-tabs-height 24)
     (centaur-tabs-set-bar 'left))
    :bind
    (("C-<prior>" . centaur-tabs-backward)
     ("C-<next>" . centaur-tabs-forward))
    :hook
    ((gud-mode . jd:disable-centaur-tabs)
     (gud-locals-mode . jd:disable-centaur-tabs)
     (gud-inferior-io-mode . jd:disable-centaur-tabs)
     (gud-frames-mode . jd:disable-centaur-tabs)
     (gud-breakpoints-mode . jd:disable-centaur-tabs))
    :config
    (defun jd:centaur-tabs-buffer-groups ()
      "Customize centaur tabs group rules."
      (list
       (cond
	((or (derived-mode-p 'eshell-mode)
	     (derived-mode-p 'shell-mode)
	     (derived-mode-p 'vterm-mode)
	     (derived-mode-p 'term-mode))
	 "Term/Shell")
	((memq major-mode '(org-mode org-agenda-mode diary-mode))
	 "OrgMode")
	((memq major-mode '(magit-process-mode
			    magit-status-mode
			    magit-diff-mode
			    magit-log-mode
			    magit-file-mode
			    magit-blob-mode
			    magit-blame-mode))
	 "Magit")
	((string-equal "*" (substring (buffer-name) 0 1))
	 "Emacs")
	(t
	 (centaur-tabs-get-group-name (current-buffer))))))
    (advice-add 'centaur-tabs-buffer-groups :override #'jd:centaur-tabs-buffer-groups)
    (when (featurep 'all-the-icons)
      (setq centaur-tabs-set-icons t))
    (centaur-tabs-headline-match)
    (centaur-tabs-mode t))
#+end_src

** Ivy Setup 
Ivy (together with counsel, swiper) makes completion quick and easy.

*** Basic ivy
#+begin_src elisp
  (use-package ivy
    :bind
    (("C-c v" . ivy-push-view)
     ("C-c V" . ivy-pop-view)
     ("C-c C-r" . ivy-resume))
    :custom
    ((ivy-use-virtual-buffers t)
     (ivy-count-format "%d/%d")
     (ivy-wrap t)
     (ivy-height 10))
    :config
    (ivy-mode 1))
#+end_src
*** Counsel
Counsel provides various extended functions using ivy completion.
=counsel-mode= binds various shortcuts. 
#+begin_src elisp
  (use-package counsel
    :demand
    :bind
    ("C-c k" . counsel-rg)
    :config
    (counsel-mode))
#+end_src
*** Swiper
Swiper should be installed already with ivy. Use it for searching. 
#+begin_src elisp
  (use-package swiper
    :bind
    ("C-s" . swiper-isearch))
#+end_src
*** Enhancements
Various packages that enhance ivy.
 
=ivy-rich= displays more info in ivy. 
#+begin_src elisp
  (use-package ivy-rich
    :config
    (ivy-rich-mode 1))
#+end_src

=smex= shows the most recent command in M-x. Specify where it saves
the history. This could be helpful if we have multiple Emacs profiles.
#+begin_src elisp
  (use-package smex
    :custom
    (smex-save-file (expand-file-name "smex-hist.el" user-emacs-directory))
    :config
    (smex-initialize))
#+end_src

Use =C-o= to use hydra with ivy
#+begin_src elisp
  (use-package ivy-hydra)
#+end_src

Show xref results in ivy. Needs different set-up for older Emacs. 
#+begin_src elisp
  (use-package ivy-xref
    :if (>= emacs-major-version 27)
    :custom
    (xref-show-definitions-function #'ivy-xref-show-defs))
  
  (use-package ivy-xref
    :if (< emacs-major-version 27)
    :custom
    (xref-show-definitions-function #'ivy-xref-show-xrefs))
#+end_src

** Projects
*** Projectile
Use projectile to manage projects in Emacs. Maybe will consider using
=project.el= later. 
#+begin_src elisp
  (use-package projectile
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-mode))
#+end_src

**** Projectile with ivy
#+begin_src elisp
  (use-package counsel-projectile
    :if (featurep 'counsel)
    :config
    (counsel-projectile-mode t))
#+end_src

*** Ripgrep
Ripgrep is very fast and convenient when searching in a project. 
#+begin_src elisp
  (use-package rg
    :defer t)
#+end_src

*** Treemacs
Side bar to navigate files in a project. Quite helpful at times, and
looks modern.  It might conflict with other window management
packages, so need to be careful in config.

Also, if using telephone line, need to add a separator so it can
adjust treemacs mode-line height.
#+begin_src elisp
  (use-package treemacs
    :demand
    :bind
    ("C-x 1" . treemacs-delete-other-windows)
    :custom
    ((treemacs-width 34)
     (treemacs-no-delete-other-windows nil))
    :custom-face
    (treemacs-root-face ((t (:inherit font-lock-string-face :weight bold :height 1.1))))
    :config
    (when (featurep 'telephone-line)
      (setq treemacs-user-mode-line-format
	    '((:eval
	       (telephone-line-separator-render telephone-line-abs-left
						(telephone-line-face-map 'nil)
						(telephone-line-face-map 'accent)))
	      "Treemacs")))
    (treemacs-resize-icons 20))
#+end_src

**** Treemacs-magit
Work with magit on updating file status. 
#+begin_src elisp
  (use-package treemacs-magit)
#+end_src

** Version Control
Use magit for version control (of course). 

*** Transient
Required by magit. 
#+begin_src elisp
  (use-package transient)
#+end_src

*** Magit
Customize magit a bit to my liking.
#+begin_src elisp
  (use-package magit
    :demand
    :bind
    ("C-x g" . magit-status)
    :custom
    ((ediff-diff-options "-w")
     (ediff-split-window-function #'split-window-horizontally)
     (ediff-window-setup-function #'ediff-setup-windows-plain)
     (magit-display-buffer-function #'magit-display-buffer-fullcolumn-most-v1)))
#+end_src

*** Magithub
#+begin_src elisp
  (use-package magithub
    :config
    (magithub-feature-autoinject t))
#+end_src
** Editing
*** Company
Complete anything!

In gud-mode, we don't want company to auto show up, since it makes
things super laggy. Define a function to disable it.
#+begin_src elisp
  (defun jd:disable-company-idle-delay ()
    (make-variable-buffer-local 'company-idle-delay)
    (setq company-idle-delay nil))
#+end_src

#+begin_src elisp
  (use-package company
    :demand
    :custom
    ((company-idle-delay 0.2)
     (company-show-numbers t)
     (company-minimum-prefix-length 2)
     (company-tooltip-align-annotations t)
     (company-tooltip-maximum-width 300))
    :bind
    (("C-M-i" . company-complete)
     ("C-<tab>" . company-complete)
     :map company-active-map
     ("C-n" . company-select-next)
     ("C-p" . company-select-previous))
    :hook
    ((after-init . global-company-mode)
     (gud-mode . jd:disable-company-idle-delay))
    :config
    (dotimes (i 10)
      (define-key company-active-map (kbd (format "C-%d" i)) 'company-complete-number)))
#+end_src

*** Spell Check
Use flyspell for spell check. =wucuo.el= helps improving things for
on-the-fly checking, but can be annoying at times for programming, as
we do not always use (combinations of) full words. 

#+begin_src elisp
  (use-package wucuo
    :hook
    ((text-mode . wucuo-start))
    :config
    (cond
     ((executable-find "aspell")
      ;; you may also need `ispell-extra-args'
      (setq ispell-program-name "aspell"))
     ((executable-find "hunspell")
      (setq ispell-program-name "hunspell"))))
#+end_src

Use =flyspell-correct.el= for easy batch correction. =C-.= and =C-,=
are set manually to nil to avoid conflicts with my xref shortcuts.

#+begin_src elisp
  (use-package flyspell-correct
    :bind
    (:map flyspell-mode-map
	  ("C-;" . flyspell-correct-wrapper)
	  ("C-," . nil)
	  ("C-." . nil)))

  (use-package flyspell-correct-ivy
    :if (featurep 'ivy))
#+end_src

*** Undo-tree
Helps with a visualized undo tree. 

#+begin_src elisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+end_src

*** Smartparens
Automatically highlights and inserts parens. Add support for curly
braces (automatically add a newline there) and c comment pairs.

#+begin_src elisp
  (use-package smartparens-config
    :straight smartparens
    :config
    (sp-with-modes
     '(c-mode c++-mode)
     (sp-local-pair "{" nil
		    :post-handlers '(("||\n[i]" "RET")))
     (sp-local-pair "/*" "*/"))
    (smartparens-global-mode t)
    (show-smartparens-global-mode t))
#+end_src

*** Others
Set the fill column width to be 80 for the general case. 
#+begin_src elisp
  (setq-default fill-column 80)
#+end_src

** Org-mode
I am quite new to org mode, but there are some things already quite useful.
*** TOC
Auto insert a TOC when saving. Very helpful for GitHub org files. 
#+begin_src elisp
  (use-package toc-org
    :hook
    (org-mode . toc-org-mode))
#+end_src

** Terminal/Shell
=vterm= emulates the terminal well and enables many Emacs key-bindings
as a buffer.
#+begin_src elisp
  (use-package vterm
    :if module-file-suffix
    :custom
    (vterm-kill-buffer-on-exit t))
#+end_src

** TTY Emacs Specific
*** Mouse
In TTY Emacs, I still want to use mouse sometimes.
#+begin_src elisp
  (unless window-system
    (xterm-mouse-mode t)
    (setq mouse-sel-mode t
	  xterm-set-window-title t))

#+end_src
*** Clipetty
=clipetty= helps transferring the paste board from a tty Emacs to a
remote client.
#+begin_src elisp
  (use-package clipetty
    :bind
    ("M-w" . clipetty-kill-ring-save))
#+end_src
*** Keys
For company mode, we need =C-0= to =C-9=, but their codes are not
defined in the key-map.
#+begin_src elisp
  (dotimes (i 10)
    (define-key input-decode-map (format "\e[%d;5u" (+ i 48)) (kbd (format "C-%d" i))))
#+end_src

** Buffer/Window Management
*** =ace-window=
Jumping among windows. 
#+begin_src elisp
  (use-package ace-window
    :bind
    ("M-o" . ace-window))
#+end_src

*** Window movements
Use Shift + arrows to move among windows. 
#+begin_src elisp
  (windmove-default-keybindings)
#+end_src
*** Side windows
Define the rules for side windows.

Do not preserve height for top/bottom, and width for left/right.
#+begin_src elisp
  (defvar jd--par-sidewin-top-bot
    '(preserve-size . (nil . nil)))

  (defvar jd--par-sidewin-left-right
    '(preserve-size . (nil . nil)))
#+end_src

Allow fit window to buffer horizontally. Also resize pixel-wise.
#+begin_src elisp
  (setq fit-window-to-buffer-horizontally t)
  (setq window-resize-pixelwise t)
#+end_src

Define the function to fit buffer width with constraints. 
#+begin_src elisp
  (defcustom jd--fit-width-min-ratio 0.2 "Minimum width of a window to fit to buffer.")
  (defcustom jd--fit-width-max-ratio 0.5 "Maximum width of a window to fit to buffer.")

  (defun jd:fit-window-to-buffer-ratio (&optional window)
    "Fit WINDOW to buffer with ratio constraints."
    (let ((min-width (ceiling (* (frame-width) jd--fit-width-min-ratio)))
	  (max-width (floor (* (frame-width) jd--fit-width-max-ratio))))
      (fit-window-to-buffer window nil nil max-width min-width nil)))
#+end_src

Define the variable to determine width with a fixed ratio. (Currently not used).
#+begin_src elisp
  (defcustom jd--fixed-width-ratio 0.4 "Fixed width ratio for sidewindows")
#+end_src

Set =display-buffer-alist= to display certain buffers in side windows. 
#+begin_src elisp
  (setq display-buffer-alist 
  `(("\\*\\(.*[hH]elp\\|undo-tree.*\\)\\*" 
     display-buffer-in-side-window
     (side . right)
     (slot . 0)
     (window-width . jd:fit-window-to-buffer-ratio)
     jd--par-sidewin-left-right)
    ("\\*\\(grep\\|Completions\\|compilation\\|Python Check\\)\\*"
     display-buffer-in-side-window
     (side . bottom)
     (slot . 0)
     jd--par-sidewin-top-bot)))
#+end_src
** Miscellaneous Packages
*** Which-key mode
Displays the key bindings after a prefix. 

#+begin_src elisp
  (use-package which-key
    :config
    (which-key-mode t))
#+end_src

** Final Touch
Set gc thres back to normal.
#+begin_src elisp
    (setq gc-cons-threshold 50000000)
#+end_src

** Provide init.el

#+begin_src elisp
  (provide 'init)
  ;;; init.el ends here
#+end_src

#  LocalWords:  Init init Andrey's parens Smartparens flyspell gud gc
#  LocalWords:  Magithub treemacs config Swiper swiper thres Clipetty
#  LocalWords:  TOC

